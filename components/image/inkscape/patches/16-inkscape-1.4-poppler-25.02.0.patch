From eec175c9338e84b7748fe1f7e8d510c629dde10f Mon Sep 17 00:00:00 2001
From: KrIr17 <elendil.krir17@gmail.com>
Date: Sun, 9 Feb 2025 18:35:50 +0530
Subject: [PATCH] Fix building with poppler 25.02.0

1. `getCodeToGIDMap`, `getCIDToGID`, `getCIDToGIDMap` are now `std::vector`

2. `pdfDocEncodingToUTF16` returns an `std::string`
---
 .../pdfinput/poppler-cairo-font-engine.cpp    | 49 ++++++++++++++++---
 .../pdfinput/poppler-transition-api.h         | 22 ++++++---
 2 files changed, 57 insertions(+), 14 deletions(-)

--- inkscape-1.4_2024-10-09_e7c3feb100/src/extension/internal/pdfinput/poppler-cairo-font-engine.cpp.orig
+++ inkscape-1.4_2024-10-09_e7c3feb100/src/extension/internal/pdfinput/poppler-cairo-font-engine.cpp
@@ -407,13 +407,21 @@
             break;
         case fontCIDType2:
         case fontCIDType2OT:
+#if POPPLER_CHECK_VERSION(25,2,0)
+            if (!gfxcid->getCIDToGID().empty()) {
+#else
             if (gfxcid->getCIDToGID()) {
                 n = gfxcid->getCIDToGIDLen();
                 if (n) {
-                    const int *src = gfxcid->getCIDToGID();
+#endif
+                    const auto src = gfxcid->getCIDToGID();
+#if POPPLER_CHECK_VERSION(25,2,0)
+                    codeToGID = std::move(src);
+#else
                     codeToGID.reserve(n);
                     codeToGID.insert(codeToGID.begin(), src, src + n);
                 }
+#endif
             } else {
 #if POPPLER_CHECK_VERSION(22, 1, 0)
                 std::unique_ptr<FoFiTrueType> ff;
@@ -429,13 +437,18 @@
                     goto err2;
                 }
 #if POPPLER_CHECK_VERSION(22, 1, 0)
-                int *src = gfxcid->getCodeToGIDMap(ff.get(), &n);
+                auto src = gfxcid->_POPPLER_GET_CODE_TO_GID_MAP(ff.get(), &n);
 #else
-                int *src = gfxcid->getCodeToGIDMap(ff, &n);
+                auto src = gfxcid->_POPPLER_GET_CODE_TO_GID_MAP(ff, &n);
 #endif
+
+#if POPPLER_CHECK_VERSION(25,2,0)
+                codeToGID = std::move(src);
+#else
                 codeToGID.reserve(n);
                 codeToGID.insert(codeToGID.begin(), src, src + n);
                 gfree(src);
+#endif
             }
             /* Fall through */
         case fontTrueType:
@@ -457,13 +470,17 @@
             /* This might be set already for the CIDType2 case */
             if (fontType == fontTrueType || fontType == fontTrueTypeOT) {
 #if POPPLER_CHECK_VERSION(22, 1, 0)
-                int *src = gfx8bit->getCodeToGIDMap(ff.get());
+                auto src = gfx8bit->getCodeToGIDMap(ff.get());
 #else
-                int *src = gfx8bit->getCodeToGIDMap(ff);
+                auto src = gfx8bit->getCodeToGIDMap(ff);
 #endif
+#if POPPLER_CHECK_VERSION(25,2,0)
+                codeToGID = std::move(src);
+#else
                 codeToGID.reserve(256);
                 codeToGID.insert(codeToGID.begin(), src, src + 256);
                 gfree(src);
+#endif
             }
             font_face = getFreeTypeFontFace(fontEngine, lib, fileName, std::move(font_data));
             if (!font_face) {
@@ -481,10 +498,14 @@
                     ff1c = FoFiType1C::load(fileName.c_str());
                 }
                 if (ff1c) {
-                    int *src = ff1c->getCIDToGIDMap(&n);
+                    auto src = ff1c->_POPPLER_GET_CID_TO_GID_MAP(&n);
+#if POPPLER_CHECK_VERSION(25,2,0)
+                    codeToGID = std::move(src);
+#else
                     codeToGID.reserve(n);
                     codeToGID.insert(codeToGID.begin(), src, src + n);
                     gfree(src);
+#endif
                     delete ff1c;
                 }
             }
@@ -497,13 +518,21 @@
             break;
 
         case fontCIDType0COT:
+#if POPPLER_CHECK_VERSION(25,2,0)
+            if (!gfxcid->getCIDToGID().empty()) {
+#else
             if (gfxcid->getCIDToGID()) {
                 n = gfxcid->getCIDToGIDLen();
                 if (n) {
-                    const int *src = gfxcid->getCIDToGID();
+#endif
+                    const auto src = gfxcid->getCIDToGID();
+#if POPPLER_CHECK_VERSION(25,2,0)
+                    codeToGID = std::move(src);
+#else
                     codeToGID.reserve(n);
                     codeToGID.insert(codeToGID.begin(), src, src + n);
                 }
+#endif
             }
 
             if (codeToGID.empty()) {
@@ -520,10 +549,14 @@
                     }
                     if (ff) {
                         if (ff->isOpenTypeCFF()) {
-                            int *src = ff->getCIDToGIDMap(&n);
+                            auto src = ff1c->_POPPLER_GET_CID_TO_GID_MAP(&n);
+#if POPPLER_CHECK_VERSION(25,2,0)
+                            codeToGID = std::move(src);
+#else
                             codeToGID.reserve(n);
                             codeToGID.insert(codeToGID.begin(), src, src + n);
                             gfree(src);
+#endif
                         }
                     }
                 }
--- inkscape-1.4_2024-10-09_e7c3feb100/src/extension/internal/pdfinput/poppler-transition-api.h.orig
+++ inkscape-1.4_2024-10-09_e7c3feb100/src/extension/internal/pdfinput/poppler-transition-api.h
@@ -75,6 +75,16 @@
 #define _POPPLER_NEW_GLOBAL_PARAMS(args...) new GlobalParams(args)
 #endif
 
+#if POPPLER_CHECK_VERSION(25,2,0)
+#define _POPPLER_GET_CODE_TO_GID_MAP(ff, len) getCodeToGIDMap(ff)
+#define _POPPLER_GET_CID_TO_GID_MAP(len) getCIDToGIDMap()
+#define _POPPLER_PDF_DOC_ENCODING_TO_UTF16(str, strlen) pdfDocEncodingToUTF16(str).c_str()
+#else
+#define _POPPLER_GET_CODE_TO_GID_MAP(ff, len) getCodeToGIDMap(ff, len)
+#define _POPPLER_GET_CID_TO_GID_MAP(len) getCIDToGIDMap(len)
+#define _POPPLER_PDF_DOC_ENCODING_TO_UTF16(str, strlen) pdfDocEncodingToUTF16(str, strlen)
+#endif
+
 
 #if POPPLER_CHECK_VERSION(0, 72, 0)
 #define getCString c_str
